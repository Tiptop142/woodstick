import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode, ContentType
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart

API_TOKEN = '8265074513:AAECiHCO5pUSlzOs8KEZWYUU94h06ve25ic'
GROUP_ID = -1002726032172
ALLOWED_USERS = [635809430]

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class ReportState(StatesGroup):
    choosing_mech_option = State()
    type = State()
    machine = State()
    equipment = State()
    description = State()
    photo = State()

active_reports = {}  # {message_id: {...}}

last_menu_message_id = None  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é

async def delete_old_messages(state: FSMContext, chat_id: int):
    data = await state.get_data()
    msg_ids = data.get("message_ids", [])
    for msg_id in msg_ids:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as ex:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–º—ñ–∂–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {msg_id}: {ex}")
    await state.update_data(message_ids=[])

async def save_message_id(state: FSMContext, message: Message):
    data = await state.get_data()
    msg_ids = data.get("message_ids", [])
    msg_ids.append(message.message_id)
    await state.update_data(message_ids=msg_ids)

async def send_menu_button():
    global last_menu_message_id

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–æ—é, —è–∫—â–æ —î
    if last_menu_message_id is not None:
        try:
            await bot.delete_message(chat_id=GROUP_ID, message_id=last_menu_message_id)
        except Exception as ex:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–µ –º–µ–Ω—é: {ex}")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="show_menu")]
    ])
    sent_msg = await bot.send_message(chat_id=GROUP_ID, text="–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é:", reply_markup=kb)
    last_menu_message_id = sent_msg.message_id

@dp.callback_query(F.data == "show_menu")
async def show_menu_callback(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ALLOWED_USERS:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.", show_alert=True)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ† –ú–µ—Ö–∞–Ω—ñ—á–Ω–∞ —Å–ª—É–∂–±–∞", callback_data="open_mech")],
        [InlineKeyboardButton(text="üìä –ó–≤—ñ—Ç–∏", callback_data="open_reports")]
    ])
    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ —É –≥—Ä—É–ø—ñ (—Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ)
    try:
        # –†–µ–¥–∞–≥—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤ —Ç–æ–º—É –∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text="–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
            reply_markup=kb
        )
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é: {e}")
        # –Ø–∫—â–æ –Ω–µ –≤–∏–π—à–ª–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await callback.message.answer("–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=kb)

    await callback.answer()

@dp.callback_query(F.data == "open_mech")
async def mech_menu(callback: CallbackQuery, state: FSMContext):
    await delete_old_messages(state, callback.message.chat.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1. –î–æ–¥–∞—Ç–∏ –Ω–µ—Å–ø—Ä–∞–≤–Ω—ñ—Å—Ç—å", callback_data="mech_add_issue")],
        [InlineKeyboardButton(text="2. –ó–∞—É–≤–∞–∂–µ–Ω–Ω—è –ø–æ —Ä–æ–±–æ—Ç—ñ", callback_data="mech_feedback")]
    ])
    sent_msg = await callback.message.answer("–ú–µ–Ω—é –ú–µ—Ö–∞–Ω—ñ—á–Ω–æ–≥–æ —Ü–µ—Ö—É:", reply_markup=kb)
    await save_message_id(state, sent_msg)
    await state.set_state(ReportState.choosing_mech_option)
    await callback.answer()

@dp.callback_query(ReportState.choosing_mech_option, F.data == "mech_add_issue")
async def mech_add_issue(callback: CallbackQuery, state: FSMContext):
    await delete_old_messages(state, callback.message.chat.id)
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ö—Ä–∏—Ç–∏—á–Ω–∞", callback_data="type_critical"),
            InlineKeyboardButton(text="–ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞", callback_data="type_noncritical"),
        ]
    ])
    sent_msg = await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–ª–æ–º–∫–∏:", reply_markup=builder)
    await save_message_id(state, sent_msg)
    await state.set_state(ReportState.type)
    await callback.answer()

@dp.callback_query(ReportState.choosing_mech_option, F.data == "mech_feedback")
async def mech_feedback(callback: CallbackQuery, state: FSMContext):
    await delete_old_messages(state, callback.message.chat.id)
    sent_msg = await callback.message.answer("–†–æ–∑–¥—ñ–ª '–ó–∞—É–≤–∞–∂–µ–Ω–Ω—è –ø–æ —Ä–æ–±–æ—Ç—ñ' –ø–æ–∫–∏ —â–æ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π.")
    await save_message_id(state, sent_msg)
    await callback.answer()

@dp.callback_query(ReportState.type, F.data.startswith("type_"))
async def type_selected(callback: CallbackQuery, state: FSMContext):
    await delete_old_messages(state, callback.message.chat.id)
    issue_type = callback.data.split("_")[1]
    await state.update_data(type=issue_type)
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°—Ç–∞–Ω–æ–∫ 1", callback_data="machine_1"),
            InlineKeyboardButton(text="–°—Ç–∞–Ω–æ–∫ 2", callback_data="machine_2"),
            InlineKeyboardButton(text="–°—Ç–∞–Ω–æ–∫ 3", callback_data="machine_3"),
        ]
    ])
    sent_msg = await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞–Ω–æ–∫:", reply_markup=builder)
    await save_message_id(state, sent_msg)
    await state.set_state(ReportState.machine)
    await callback.answer()

@dp.callback_query(ReportState.machine, F.data.startswith("machine_"))
async def machine_selected(callback: CallbackQuery, state: FSMContext):
    await delete_old_messages(state, callback.message.chat.id)
    machine = callback.data.split("_")[1]
    await state.update_data(machine=machine)
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è A", callback_data="equip_A"),
            InlineKeyboardButton(text="–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è B", callback_data="equip_B"),
            InlineKeyboardButton(text="–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è C", callback_data="equip_C"),
        ]
    ])
    sent_msg = await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è:", reply_markup=builder)
    await save_message_id(state, sent_msg)
    await state.set_state(ReportState.equipment)
    await callback.answer()

@dp.callback_query(ReportState.equipment, F.data.startswith("equip_"))
async def equipment_selected(callback: CallbackQuery, state: FSMContext):
    await delete_old_messages(state, callback.message.chat.id)
    equipment = callback.data.split("_")[1]
    await state.update_data(equipment=equipment)
    sent_msg = await callback.message.answer("–û–ø–∏—à—ñ—Ç—å –ø–æ–ª–æ–º–∫—É —Ç–µ–∫—Å—Ç–æ–º:")
    await save_message_id(state, sent_msg)
    await state.set_state(ReportState.description)
    await callback.answer()

@dp.message(ReportState.description)
async def description_entered(message: Message, state: FSMContext):
    await delete_old_messages(state, message.chat.id)
    await state.update_data(description=message.text)
    try:
        await message.delete()
    except Exception:
        pass
    sent_msg = await message.answer("–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç –∑ –ø–æ–ª–æ–º–∫–æ—é.")
    await save_message_id(state, sent_msg)
    await state.set_state(ReportState.photo)

@dp.message(ReportState.photo, F.content_type.in_({ContentType.PHOTO, ContentType.DOCUMENT}))
async def photo_or_doc_received(message: Message, state: FSMContext):
    data = await state.get_data()
    caption = (
        f"<b>üö® –ü–æ–ª–æ–º–∫–∞</b>\n"
        f"<b>–¢–∏–ø:</b> {'–ö—Ä–∏—Ç–∏—á–Ω–∞' if data['type'] == 'critical' else '–ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞'}\n"
        f"<b>–°—Ç–∞–Ω–æ–∫:</b> {data['machine']}\n"
        f"<b>–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è:</b> {data['equipment']}\n"
        f"<b>–û–ø–∏—Å:</b> {data['description']}"
    )

    try:
        if message.photo:
            file_id = message.photo[-1].file_id
            sent = await bot.send_photo(
                chat_id=GROUP_ID,
                photo=file_id,
                caption=caption,
                parse_mode=ParseMode.HTML,
                reply_markup=None
            )
        elif message.document:
            file_id = message.document.file_id
            sent = await bot.send_document(
                chat_id=GROUP_ID,
                document=file_id,
                caption=caption,
                parse_mode=ParseMode.HTML,
                reply_markup=None
            )
        else:
            await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç.")
            return

        markup = InlineKeyboardMarkup(inline_keyboard=[[  
            InlineKeyboardButton(text="–í—ñ–¥—Ä–µ–º–æ–Ω—Ç–æ–≤–∞–Ω–æ", callback_data=f"mark_done:{sent.message_id}")
        ]])
        await bot.edit_message_reply_markup(
            chat_id=GROUP_ID,
            message_id=sent.message_id,
            reply_markup=markup
        )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ –≥—Ä—É–ø—É: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É.")
        return

    active_reports[sent.message_id] = {
        "user_id": message.from_user.id,
        "description": data['description'],
        "status": "–ê–∫—Ç–∏–≤–Ω–∞"
    }

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–º—ñ–∂–∫–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    await delete_old_messages(state, message.chat.id)
    try:
        await message.delete()
    except Exception:
        pass

    await state.clear()

    # –ü—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–ª–æ–º–∫–∏ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –≤ –∫—ñ–Ω—Ü—ñ –≥—Ä—É–ø–∏
    await send_menu_button()

@dp.message(ReportState.photo)
async def invalid_input(message: Message):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç –∑ –ø–æ–ª–æ–º–∫–æ—é.")

@dp.callback_query(F.data.startswith("mark_done:"))
async def mark_done_handler(callback: CallbackQuery, state: FSMContext):
    message_id_str = callback.data.split(":")[1]
    try:
        message_id = int(message_id_str)
    except ValueError:
        await callback.answer("–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ.")
        return

    report = active_reports.get(message_id)
    if not report:
        await callback.answer("–¶–µ–π –∑–≤—ñ—Ç –≤–∂–µ –≤—ñ–¥–º—ñ—á–µ–Ω–∏–π –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î.")
        return

    if report["status"] == "–í—ñ–¥—Ä–µ–º–æ–Ω—Ç–æ–≤–∞–Ω–æ":
        await callback.answer("–¶–µ–π –∑–≤—ñ—Ç —É–∂–µ –≤—ñ–¥–º—ñ—á–µ–Ω–∏–π —è–∫ –≤—ñ–¥—Ä–µ–º–æ–Ω—Ç–æ–≤–∞–Ω–∏–π.")
        return

    report["status"] = "–í—ñ–¥—Ä–µ–º–æ–Ω—Ç–æ–≤–∞–Ω–æ"
    active_reports[message_id] = report

    try:
        await bot.edit_message_caption(
            chat_id=GROUP_ID,
            message_id=message_id,
            caption=(
                f"<b>üö® –ü–æ–ª–æ–º–∫–∞</b>\n"
                f"<b>–û–ø–∏—Å:</b> {report['description']}\n\n"
                f"<b>‚úÖ –°—Ç–∞—Ç—É—Å: –í—ñ–¥—Ä–µ–º–æ–Ω—Ç–æ–≤–∞–Ω–æ</b>"
            ),
            parse_mode=ParseMode.HTML
        )
        await callback.answer("–°—Ç–∞—Ç—É—Å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    await send_menu_button()  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
